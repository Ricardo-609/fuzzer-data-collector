# generate statistic test results based on .csv files
# the test/statistics.csv is generated by: https://onlinemathtools.com/generate-random-matrix

import argparse
import scipy.stats
import numpy as np
import json


# currently support student t test, mann whitney u test and a12 results
def statistic_tests(data_array):
    checked = []
    data_names = data_array.dtype.names
    student_t_results = {}
    mw_u_results = {}
    a12_results = {}
    average_values = {}
    for dname1 in data_names:
        for dname2 in data_names:
            if not dname1 == dname2 and not (dname1, dname2) in checked:
                checked.append((dname1, dname2))
                checked.append((dname2, dname1))

                s_test_key = '{}-{}'.format(dname1, dname2)

                student_t_p_value = scipy.stats.ttest_ind(data_array[dname1], data_array[dname2])[1]
                mw_u_p_value = scipy.stats.mannwhitneyu(data_array[dname1], data_array[dname2])[1]

                student_t_results[s_test_key] = student_t_p_value
                mw_u_results[s_test_key] = mw_u_p_value

                a12_key1 = '{}<{}'.format(dname1, dname2)
                a12_key2 = '{}<{}'.format(dname2, dname1)
                a12_results[a12_key1] = calculate_a12(data_array[dname1], data_array[dname2])
                a12_results[a12_key2] = calculate_a12(data_array[dname2], data_array[dname1])

        # do things that do not need comparison with another set of data
        average_values[dname1] = np.average(data_array[dname1])

    statistic_test_results = {
        "student_t_test": student_t_results,
        "mann_whitney_u_test": mw_u_results,
        "a12": a12_results,
        "average": average_values
    }
    return statistic_test_results


# calculate the chance of f1s < f2s
def calculate_a12(f1s, f2s):
    numerator = 0
    denominator = float(len(f1s) * len(f2s))
    for first_val in f1s:
        for second_val in f2s:
            if first_val < second_val:
                numerator += 1
            elif first_val == second_val:
                numerator += 0.5
    a12 = numerator / denominator
    return a12


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--input", "-i", required=True, type=str, help="path to the input csv file")
    parser.add_argument("--output", "-o", required=True, type=str, help="path to the output file, in json format")

    args = parser.parse_args()

    data_array = np.genfromtxt(args.input, delimiter=',', names=True)

    results = statistic_tests(data_array)

    with open(args.output, 'w') as output_file:
        json.dump(results, indent=2, sort_keys=True, fp=output_file)


if __name__ == "__main__":
    main()
